name: AstrOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test AstrOS import and basic functionality
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from astros import UniversalAIClient, EnhancedAstrOSAgent
            print('✅ AstrOS imports successfully')
            client = UniversalAIClient()
            print('✅ UniversalAIClient initialized')
            agent = EnhancedAstrOSAgent()
            print('✅ EnhancedAstrOSAgent initialized')
            print('✅ All basic functionality tests passed')
        except Exception as e:
            print(f'❌ Test failed: {e}')
            sys.exit(1)
        "

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8
        
    - name: Basic syntax check
      run: |
        python -m py_compile astros.py
        echo "✅ astros.py syntax is valid"
        
    - name: Format check with Black (continue on error)
      run: |
        python -m black astros.py --check --diff || echo "Black formatting issues found, continuing..."
        
    - name: Basic lint with flake8 (continue on error)
      run: |
        python -m flake8 astros.py --count --max-line-length=88 --extend-ignore=E203,E501,W293,F401,F811,E722 --statistics || echo "Linting issues found, continuing..."

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
        
    - name: Security check with bandit (continue on error)
      run: |
        python -m bandit -r astros.py src/ -f json -o bandit-report.json || echo "Security scan completed"
        
    - name: Check for known vulnerabilities
      run: |
        safety check || echo "Vulnerability scan completed"

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verify all dependencies install correctly
      run: |
        python -c "
        import httpx
        import openai
        print('✅ Core dependencies installed successfully')
        "

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Basic performance validation
      run: |
        python -c "
        import time
        import sys
        sys.path.insert(0, '.')
        start = time.time()
        from astros import EnhancedAstrOSAgent
        agent = EnhancedAstrOSAgent()
        end = time.time()
        print(f'✅ AstrOS initialization time: {end-start:.2f}s')
        "

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate README and documentation
      run: |
        if [ -f "README.md" ]; then
          echo "✅ README.md exists"
          wc -l README.md
        else
          echo "❌ README.md not found"
          exit 1
        fi